(self.webpackChunkkernel_community=self.webpackChunkkernel_community||[]).push([[4340],{3504:function(e,t,n){"use strict";n.r(t),n.d(t,{_frontmatter:function(){return i},default:function(){return d}});var a=n(9756),r=(n(7294),n(4983)),o=n(9832),i={},s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},l=s("Aligner"),p=s("Image"),c=s("Accordion"),u={_frontmatter:i},h=o.Z;function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)(h,Object.assign({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"the-learning-curve",style:{position:"relative"}},"The Learning Curve",(0,r.kt)("a",{parentName:"h2",href:"#the-learning-curve","aria-label":"the learning curve permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"Any good spec starts with a picture:"),(0,r.kt)(l,{center:!0,mdxType:"Aligner"},(0,r.kt)(p,{alt:"Learning Curve Explainer",src:"/images/Learning-Curve.png",mdxType:"Image"})),(0,r.kt)("h2",{id:"simple-summary",style:{position:"relative"}},"Simple Summary",(0,r.kt)("a",{parentName:"h2",href:"#simple-summary","aria-label":"simple summary permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"A generalised template for online educational courses."),(0,r.kt)("h2",{id:"abstract",style:{position:"relative"}},"Abstract",(0,r.kt)("a",{parentName:"h2",href:"#abstract","aria-label":"abstract permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"The following specifies a set of contracts capable of supporting free online educational environments for learners, while ensuring that educators are rewarded for the content they create. This standard allows for the creation of any kind of course and only expects educators to ensure learners can claim their fee back after some period of time."),(0,r.kt)("h2",{id:"motivation",style:{position:"relative"}},"Motivation",(0,r.kt)("a",{parentName:"h2",href:"#motivation","aria-label":"motivation permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"Student debt and underpaid teachers are two pivotal problems of our age. While an abundance of information exists online, especially in the open source world, we cannot simply make all resources free, as that ensures teachers become even more undervalued than they currently are. There must be some way of using programmable money to both erase student debt, while ensuring educators receive due recompense for the critical role they play in society."),(0,r.kt)("p",null,"These contracts present exactly one such solution. An epistemic community of learners who choose to mint (increasingly valuable) LEARN tokens at the end of their course, rather than just claim their original fee back, is the emergent result."),(0,r.kt)("h2",{id:"specification",style:{position:"relative"}},"Specification",(0,r.kt)("a",{parentName:"h2",href:"#specification","aria-label":"specification permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("h3",{id:"kernel-factory",style:{position:"relative"}},"Kernel Factory",(0,r.kt)("a",{parentName:"h3",href:"#kernel-factory","aria-label":"kernel factory permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"This contract contains the logic for creating courses, registering learners, and tracking whose money has gone where and how much of the initial fee can be redeemed at any given time."),(0,r.kt)("h4",{id:"methods",style:{position:"relative"}},"Methods",(0,r.kt)("a",{parentName:"h4",href:"#methods","aria-label":"methods permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"constructor")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address _stable")," - the kind of token fees are denominated in;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address _learningCurve")," - the address of the contract containing the logic for minting & burning;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address _vault")," - the yearn vault where fees are kept during study.")),(0,r.kt)("p",null,"The Factory is constructed to be aware of only these three items essential to its correct functioning.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"createCourse")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _fee")," - the amount of DAI to be locked for the duration of study;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _checkpoints")," - the number of points at which learners can redeem part of their fee;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _checkpointBlockSpacing")," - checkpoints can be defined in blocks as exact time is not required;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"string _url"),' - a simple "metadata" field to link any course to its frontend, useful for validation ',"&"," security, as well as future frontend displays;",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address _creator")," - the address to receive any yield generated when learners on this course choose not to mint LEARN.")),(0,r.kt)("p",null,"Anyone can create a course. There are no privileged roles here. The only expectation is that you define clearly when learners may redeem whatever it costs to take your course. You are encouraged to allow them to do so incrementally, using a few checkpoints, so that they can redeem portions of their fee as they go, as this likely makes their studies even more sustainable.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"batchDeposit")),(0,r.kt)("p",null,"A function which can be called by anyone to take the current funds in the Factory from fees and move them into a yearn vault.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"register")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"))),(0,r.kt)("p",null,"This method allows a learner to register for a course of their choice. It checks the fee associated with that course, accepts tokens amounting to that fee and registers the learner. The tokens are kept in the contract and assigned to the current batch. Once there are enough tokens in the batch to justify the gas costs of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"batchDeposit()"),", anyone may do so and add the current batch the yearn vault.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"verify")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address learner"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"),"  ")),(0,r.kt)("p",null,"All course are deployed with a given number of checkpoints allowing learners to receive a portion of their fees back at various stages in the course. This is a helper function that checks where a learner is in a course and is used by both ",(0,r.kt)("inlineCode",{parentName:"p"},"redeem()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mint()")," to figure out the proper amount required. It is public, so anyone may check it at any time.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"_verify")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address learner"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"),"  ")),(0,r.kt)("p",null,"The internal function that does the actual calculations and checks for the public function above. It uses ",(0,r.kt)("inlineCode",{parentName:"p"},"block.number")," because being accurate even to the second here is not required. We generally expect courses to run over periods of months, so working on block number approximations is more than adequate enough for our needs.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"redeem")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"))),(0,r.kt)("p",null,"If a learner is redeeming rather than minting, it means they are simply requesting their initial fee back (whether they have completed the course or not). In this case, it checks what proportion of ",(0,r.kt)("inlineCode",{parentName:"p"},"fee")," (set when the course is deployed) must be returned and sends it back to the learner. Whatever yield they earned is sent to the course creator."),(0,r.kt)("p",null,"If the learner has not completed the course, it checks the period elapsed since ",(0,r.kt)("inlineCode",{parentName:"p"},"blockRegistered"),", at which point the full ",(0,r.kt)("inlineCode",{parentName:"p"},"fee")," can be returned and the yield sent to the course creator.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"mint")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"))),(0,r.kt)("p",null,"Handles learner minting new LEARN checks via ",(0,r.kt)("inlineCode",{parentName:"p"},"verify()")," what proportion of the fee to send to the Learning Curve, adds any yield earned to that, and returns all the resulting LEARN tokens to the learner. This acts as an effective discount for learners (as they receive more LEARN) without us having to maintain a whitelist or the like: great for simplicity, security and usability")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getEligibleAmount")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"))),(0,r.kt)("p",null,"Gets the amount of funds that a learner is eligible for at this checkpoint in their course. It does this by looking at two things: ",(0,r.kt)("inlineCode",{parentName:"p"},"eligibleShares")," that represent that share of collateral in the yearn vault which the learner can rightfully claim; and any ",(0,r.kt)("inlineCode",{parentName:"p"},"undeployed")," DAI from their initial staked fees which has not yet been sent to a yearn vault.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getCurrentBatchTotal")),(0,r.kt)("p",null,"A helper get function which returns the total number of batches in our yearn vault.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getBlockRegistered")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address learner"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"),"  ")),(0,r.kt)("p",null,"A helper get function which returns the block a given learner registered in.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getCurrentBatchId")),(0,r.kt)("p",null,"A helper get function which returns the current ",(0,r.kt)("inlineCode",{parentName:"p"},"batchId"),".")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getNextCourseId")),(0,r.kt)("p",null,"A helper get function which returns the current ",(0,r.kt)("inlineCode",{parentName:"p"},"courseId"),".")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getUserCourseEligibleFunds")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address learner"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"),"  ")),(0,r.kt)("p",null,"A helper get function which returns the amount of funds a learner is eligible to claim back from a given course, at any given time.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getUserCourseFundsRemaining")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"address learner"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"uint256 _courseId"),"  ")),(0,r.kt)("p",null,"A helper get function which returns the amount of the initial fee a learner staked which remains in the course at any given time.")),(0,r.kt)("h4",{id:"events",style:{position:"relative"}},"Events",(0,r.kt)("a",{parentName:"h4",href:"#events","aria-label":"events permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CourseCreated")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 indexed courseId,\nuint256 checkpoints,\nuint256 fee,\nuint256 checkpointBlockSpacing,\nuint256 url,\nuint256 creator")),(0,r.kt)("p",null,"Likely the most important event in the long run, especially if we want to build a catalogue of courses, the URLs that they exist at, and the creator addresses which are receiving any yield. Tracking these events allows us to build a coherent and clear front-end for discovering the various courses using this standard.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"LearnerRegistered")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 indexed courseId,\naddress learner")),(0,r.kt)("p",null,"Keep track of the addresses of learners and the courses they've signed up for.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FeeRedeemed")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 courseId,\naddress learner,\nuint256 amount")),(0,r.kt)("p",null,"useful for understanding which learners have redeemed how much for each course. This allows for two important things: understanding which courses learners are ",(0,r.kt)("inlineCode",{parentName:"p"},"redeeming")," on rather than ",(0,r.kt)("inlineCode",{parentName:"p"},"minting"),"; and tracking how many learners (and how much of their original fees) are inactive in either the Vault or the Factory.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"LearnMintedFromCourse")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 courseId,\naddress learner,\nuint256 stableConverted,\nuint256 learnMinted")),(0,r.kt)("p",null,"Tracked separately from ",(0,r.kt)("inlineCode",{parentName:"p"},"LearnMinted")," events in the Learning Curve so it's easy to see how much of the total supply of LEARN comes directly from learners going through the courses on offer.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"BatchDeposited")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 batchId,\nuint256 batchAmount,\nuint256 batchYieldAmount")),(0,r.kt)("p",null,"Tracked to make it easy to see how much DAI is in each batch in the vault, and how many yDAI are associated with it for redemption or minting purposes.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CheckpointUpdated")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"uint256 courseId,\nuint256 checkpointReached,\naddress learner")),(0,r.kt)("p",null,"Helpful in understanding where different learners are at different points in the course. Only emitted when a learner actually claims some amount of their intial fee back at a given checkpoint.")),(0,r.kt)("h3",{id:"learning-curve",style:{position:"relative"}},"Learning Curve",(0,r.kt)("a",{parentName:"h3",href:"#learning-curve","aria-label":"learning curve permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"This contract contains the logic for minting and burning LEARN based on the collateral that is sent to it. Importantly, it is open to anyone, which is what allows secondary markets for LEARN to form easily. The more collateral locked, the less LEARN is minted, using an exponentially decaying function. This ensures that the price of LEARN - defined as the number in existence divided by the underlying collateral in this contract - increases linearly. Please see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/spreadsheets/d/1hjWFGPC_B9D7b6iI00DTVVLrqRFv3G5zFNiCBS7y_V8/edit?usp=sharing"},"this spreadsheet")," for the source of the graphical depiction below."),(0,r.kt)(l,{center:!0,mdxType:"Aligner"},(0,r.kt)(p,{alt:"Learn Curves",src:"/images/learn-curves.png",mdxType:"Image"})),(0,r.kt)("h4",{id:"methods-1",style:{position:"relative"}},"Methods",(0,r.kt)("a",{parentName:"h4",href:"#methods-1","aria-label":"methods 1 permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"initialise")),(0,r.kt)("p",null,"This is called only once, upon deployment, and is necessary for the maths to work. If we do not start at 1, then we end up with a DIV(0) error. The tokens are minted to the Learning Curve address itself, and so are unusable, as this seems most fair.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"mint")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _wad")," - the amount of DAI collateral to be swapped for LEARN")),(0,r.kt)("p",null,"This method allows anyone to mint LEARN tokens dependent on the amount of DAI they send. It is calculated according to the exponential decay above, which can be modelled with a natural logarithm. We use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hifi-finance/prb-math/tree/main/contracts"},"this library")," to help us calculate it, as exponents on chain are challenging.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"mintForAddress")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"address learner"),"; ",(0,r.kt)("strong",{parentName:"p"},"uint256 _wad"))),(0,r.kt)("p",null,"This is the same as a normal mint, except that an address is passed in which the minted LEARN is sent to. This is necessary to allow for mints directly from a Course, where we want to learner to receive LEARN, not the Kernel Factory. It can also be used to mint LEARN to an address other than the one contributing collateral, which could - for instance - prove useful for donations.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"burn")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 _daiToReceive")," - how much underlying DAI the burner wishes to receive back.")),(0,r.kt)("p",null,"Ideally, we'd simply pass in how much LEARN is to be burned. However, taking in a ",(0,r.kt)("inlineCode",{parentName:"p"},"_amountLearn")," and then converting this on-chain to the ",(0,r.kt)("inlineCode",{parentName:"p"},"_daiToReceive")," is not possible, as it requires dividing by ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," raised to the power of (_amountLearn / k). ")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"doLn")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 x"))),(0,r.kt)("p",null,"An internal, pure helper function that uses the PRBMathUD60x18 contract to return the natural logarithm of any number ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," we pass to it.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getBurnableForReserveAmount")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 reserveAmount")," - DAI to receive")),(0,r.kt)("p",null,"A helper function for the frontend so that we can calculate and pass the correct ",(0,r.kt)("inlineCode",{parentName:"p"},"_daiToReceive")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"burn")," method. It returns to the amount of LEARN which must be burnt in order to receive the requested DAI, which can be used to check if the learner has enough LEARN tokens for a successful ",(0,r.kt)("inlineCode",{parentName:"p"},"burn")," transaction.")),(0,r.kt)(c,{mdxType:"Accordion"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"getMintableForReserveAmount")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"params: ",(0,r.kt)("strong",{parentName:"p"},"uint256 reserveAmount")," - DAI to lock")),(0,r.kt)("p",null,"A helper function to check if the learner has enough DAI to get the desired LEARN tokens and ensure a successful ",(0,r.kt)("inlineCode",{parentName:"p"},"mint")," transaction.")),(0,r.kt)("h4",{id:"considerations",style:{position:"relative"}},"Considerations",(0,r.kt)("a",{parentName:"h4",href:"#considerations","aria-label":"considerations permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("h5",{id:"k-constant",style:{position:"relative"}},'"k" constant',(0,r.kt)("a",{parentName:"h5",href:"#k-constant","aria-label":"k constant permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"Where does this magic constant come from? We were inspired by Uniswap's constant product formula and the simplicity it represents. While our setup is slightly different, we need some constant which defines the slope of the linearly increasing price function for LEARN. We do not think it possible, in principle, to model this with complete certainty. All we can do is ask increasingly precise questions about the kinds of outcome we might wish to see, especially in terms of how many LEARN will be minted by the course fee, if the learner chooses that option. "),(0,r.kt)("p",null,"We set ",(0,r.kt)("inlineCode",{parentName:"p"},"k = 10000")," because this means that 1M DAI must be locked as collateral before your course fee for the initial KERNEL course mints just 1 LEARN, an important psychological fact if nothing else."),(0,r.kt)("h2",{id:"rationale",style:{position:"relative"}},"Rationale",(0,r.kt)("a",{parentName:"h2",href:"#rationale","aria-label":"rationale permalink",className:"anchor-link after"},(0,r.kt)("span",{parentName:"a"},"¶"))),(0,r.kt)("p",null,"There are no special accounts or privileged roles in these contracts. There are no fees collected by a specific account. That is because we are very serious about building a ",(0,r.kt)("strong",{parentName:"p"},"general template for online education")," that cannot be co-opted and that both makes learning free, while also ensuring there are rewards available for educators."),(0,r.kt)("p",null,"We are sure that there are even better ways to achieve this, and so have tried to outline in detail all our assumptions in order that this may be the beginning of a fruitful conversation about how programmable money might solve incentive problems surrounding the transfer of knowledge."),(0,r.kt)("p",null,"The state of Ethereum will be around for a long, long time to come and so we are not here to get rich quickly, we are here to play with this vastly expanded ",(0,r.kt)("a",{parentName:"p",href:"/learn/module-3/time"},"temporal")," ",(0,r.kt)("a",{parentName:"p",href:"/learn/module-4/the-garden"},"boundary"),". We have not written this for ourselves, but as a work of love and devotion to those yet to come."),(0,r.kt)("p",null,"Education is the ",(0,r.kt)("a",{parentName:"p",href:"/learn/module-7/"},"original gift")," and is especially interesting in gift-giving economies, because knowledge is given within a context that still demands effort and attention in order to be learned. Valuable knowledge may present itself for free, but it must be given attention and reflection in order to become personally meaningful. It is this paradox which makes educational gifts the seed around which a community crafting new value models can flourish. "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"As Buddha said: “a single flower blooms, and throughout the world it is spring”.")))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---content-en-fork-me-learning-curve-index-mdx-ce3efce0ef6dc4f1de1b.js.map